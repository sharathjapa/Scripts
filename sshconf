#!/bin/bash
# This is a program to switch your options
run_install()
{
    ## Prompt the user 
    "date '+%D %T' | toilet -f term -F border --metal"
    read -p "Install Missing Libraries!\nDo you want to install missing libraries? [Y/n]: " answer
    ## Set the default value if no answer was given
    answer=${answer:Y}
    ## If the answer matches y or Y, install
    [[ $answer =~ [Yy] ]] && sudo apt-get install ${app_pckg[@]}
}
 

interim_rsa_keys()
{
	ssh $host "$(typeset -f rsa_key); rsa_key"
		
}

rsa_key()
{
	 echo "Enter server name where you want to copy your rsa_public keys:"
	 read host
	 ssh-keygen -t rsa
         cat ~/.ssh/id_rsa.pub | ssh $host 'cat >> .ssh/authorized_keys'
	 sudo service ssh restart
}

rsa_keys()
{
	echo "Enter server name where you want to copy your rsa_public keys:"
	grep -Rw "Host" "$friends" | awk '{ print $2 }'
	read host
	grep -Rw "$host" "$friends" 
	ssh-keygen -t rsa
	cat ~/.ssh/id_rsa.pub | ssh $host 'cat >> .ssh/authorized_keys'
	sudo service ssh restart 
}

rsa_copy()
{
	echo "Enter server name where you want to copy your rsa_public keys:"
	echo "Your server name should be your username with server address!\n!!username@IP_address!!"
	read host
	cat ~/.ssh/id_rsa.pub | ssh $host 'cat >> .ssh/authorized_keys'
	sudo service ssh restart
}

err_in_case()
{
	$PWD/sshconf
}


valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

def_conf()
{
	sudo bash -c "echo -e \"\nControlMaster auto\nForwardAgent yes\nControlPersist 10m\nServerAliveInterval 120\nTunnel yes\n\" >> $friends"
}

first()
{
        sudo bash -c "echo -e \"\n Host $hname \n HostName $ip \n User $uname\" >> $friends"
        echo "ssh $hname to connect to the host $hname($ip)"
}
fdest()
{
        sudo bash -c "echo -e \"\n Host $hname\n Ciphers arcfour256 \n HostName $ip \n User $uname\" >> $friends"
        echo "ssh $hname to connect to the host $hname($ip)"    
}

interim()
{
        sudo bash -c "echo -e  \"\n Host $hname \n HostName $ip \n ProxyCommand ssh  $jhname -W %h:%p \n User $uname\" >> $friends"
        echo "ssh $hname to connect to the host $hname($ip)"
}
dest()
{
       sudo bash -c "echo -e \"\n Host $hname \n Ciphers arcfour256 \n HostName $ip \n ProxyCommand ssh  $jhname -W %h:%p \n User $uname\" >>$friends"
        echo "This is your $hname($ip) destination host in ssh"        
}
registering()
{
	[ ! -f "$friends" ] && { echo "Error: $1 file not found."; exit 2; }

	echo "Hello, "$USER".  This script will ease your sshing"
	echo -n "Enter number of host machines and press [ENTER]:"
	read number
	for ((i=1;i<=$number;i++))
	do
	   echo -n "Enter your host-[$i] ip address in the chain and press [ENTER]: "
	   read ip
	   if valid_ip "$ip"  ; then
	      echo $ip
	      echo "Give a name for this host to ssh in and press [ENTER]:"
	      read hname
	      echo "Enter your username for the host($ip) and press [ENTER]:"
	      read uname
	          if [ -s "$friends" ]; then
	             grep -w "$ip" "$friends" && grep -w "$hname" "$friends"
	             if [ $? == 0 ];then
	                echo "Host Address:$ip with Username:$uname already exists!!"|toilet -f term | boxes -d dog -a hc -p h8 | lolcat
	                exit 1
	             else
	                    if [ "$i" -eq 1 ]; then
	                        if [ "$number" -eq "$i" ]; then
	                                fdest
	                        else
	                                first
	                        fi
	                    else
	                         if [ "$number" -eq "$i" ]; then
	                                dest
	                        else
	                                interim
	                        fi
	                    fi
	                fi
	          else
	                      if [ "$i" -eq 1 ]; then
	                        if [ "$number" -eq "$i" ]; then
	                                fdest
	                        else
	                                first
	                        fi
	                    else
	                         if [ "$number" -eq "$i" ]; then
	                                dest
	                        else
	                                interim
	                        fi
	                    fi
	         fi
	   else
	     echo "In valid IP address ($ip)"
	     exit 1
	  fi
	  jhname="$hname"
	  grep -w "$hname" "/home/$USER/.bashrc"
	  if [ $? == 1 ];then
		echo -e "alias $hname='ssh $hname'" >> "/home/$USER/.bashrc"
	  else
		echo "alias already exists for $hname!"
	  fi
	done
	bash -c echo "source /home/$USER/.bashrc"
	echo "Use ssh -C flag for faster connections over lower bandwidths. "
	echo "-C flag in ssh compress the traffic."
	echo "Happy SSHing!"
}


_scp()
{
	echo "Enter one of the hosts from below"
	grep -Rw "Host" "$friends" | awk '{ print $2 }'
	read host
	echo "Enter Source Location"
	read src
	echo "Enter Destination Location"
	read dest
	if [ -d "$src" ] ; then
	        scp -r $src $host:$dest;
	else
	        if [ -f "$src" ] ; then
	                scp $src $host:$dest;
	        else
	                echo "$src not a valid location"
	                exit 1
	        fi
	fi                
}


_scpd()
{
	echo "Enter one of the hosts from below"
	grep -Rw "Host" "$friends" | awk '{ print $2 }'
	read host
	echo "Enter Source Location"
	read src
	echo "Enter Destination Location"
	read dest
	if [ -d "$src" ] ; then
	        scp -r $host:$src $dest;
	else
	        if [ -f "$src" ] ; then
	                scp $host:$src $dest;
	        else
	                echo "$src not a valid location"
	                exit 1
	        fi
	fi
}


main()
{
friends="/etc/ssh/ssh_config"
temp="./friends.txt"                               

app_pckg=( "sshuttle" "boxes" "lolcat" "toilet" "openssh-server" )
## Run the run_install function if sany of the libraries are missing
dpkg -s "${app_pckg[@]}" >/dev/null 2>&1 || run_install

echo -e "Switches case according to your option.\nPlease do select one of the options available!\n \n \n1.SSH\t \t2.KEYS\n3.VPN\t \t4.UPLOAD\n5.DOWNLOAD \t6.EXIT"| toilet -f term | boxes -d whirly -a hc -p h8 | lolcat
read C
case "$C" in
	[1]|[Ss][Ss][Hh])
    		echo "SSH with jump host(s)!"
		grep -w "ServerAliveInterval 120"  /etc/ssh/ssh_config
		if [ $? == 1 ];then
			def_conf
    			registering 
			err_in_case
		else
			registering
                        err_in_case
		fi
	;;

	[2]|[Kk][Ee][Yy][Ss])
		read -p "Do you have the keys generated and just looking to copy the KEYS? [Y/n]: " answer
		if [ $answer == "Y" ] || [ $answer == "y" ]; then
			rsa_copy
		else	
			read -p "Is this the host that you want to generate KEYS for? [Y/n]: " answer
			if [ $answer == "Y" ] || [ $answer == "y" ]; then
   				rsa_keys
			else
				echo "enter the host name for which you want to generate keys for:"
				grep -Rw "Host" "$friends" | awk '{ print $2 }'
				read host
				interim_rsa_keys
			fi
		fi		
	;;	
	[3]|[Vv][Pp][Nn])
    		echo "Enter one of the hosts from the ssh_config file."
		grep -Rw "Host" "$friends" | awk '{ print $2 }'
		read host
		echo "A SSH session to tunnel all your traffic to your $host server will be set!
				To stop the VPN hit control+C" | boxes -d shell -p a1l2 | toilet -f term --metal 
		sleep 2
    		sshuttle -NHvr $host
	;;

   	[4]|[Uu][Pp][Ll][Oo][Aa][Dd])
    		_scp 
		sleep 2 |err_in_case
    	;;

    	[5]|[Dd][Oo][Ww][Nn][Ll][Oo][Aa][Dd])
    		_scpd 
		sleep 2 |err_in_case
    	;;

   	[6]|[Ee][Xx][Ii][Tt])
    		echo "Exiting Service!!"
    	;;

	*)	
		clear
		printf "Invalid Option!\nPlease choose a valid option!"|toilet -f term | boxes -d dog -a hc -p h8 | lolcat -f 
		$PWD/sshconf
		;;
esac
}

main
